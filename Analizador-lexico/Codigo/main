import ply.lex as lex

resultado_lexema = []

reservadas = {
  'include': 'INCLUDE',
  'using': 'USING',
  'namespace': 'NAMESPACE',
  'std': 'STD',
  'cout': 'COUT',
  'print': 'PRINT',
  'get': 'GET',
  'string': 'STRING',
  'return': 'RETURN',
  'func': 'FUNC'
}

tokens = list(reservadas.values()) + list((
  'ID',
  'NUM',
  'TEXT',
  'OP_SUMA',
  'OP_REST',
  'OP_MULT',
  'OP_DIV',
  'OP_EQUAL',
  'OP_MENOR',
  'OP_MAYOR',
  'OP_EQUALEQUAL',
  'OP_MENORIGUAL',
  'OP_MAYORIGUAL',
  'OP_DOSP',
  'OP_COM',
  'PAR_IZQ',
  'PAR_DER',
  'LLAVE_IZQ',
  'LLAVE_DER',
  'AND',
  'OR',
  'NOT',
  'IF',
  'ELSE',
  'READ',
  'B_FOR',
  'B_WHILE',
  'B_DO',
  'T_INT',
  'T_FLOAT',
  'T_CHAR',
  'T_STRING',
  'T_BOOL',
))

t_OP_SUMA = r'\+'
t_OP_REST = r'-'
t_OP_MULT = r'\*'
t_OP_DIV = r'/'
t_OP_EQUAL = r'='
t_OP_MENOR = r'<'
t_OP_MAYOR = r'>'
t_OP_EQUALEQUAL = r'=='
t_OP_MENORIGUAL = r'<='
t_OP_MAYORIGUAL = r'>='
t_OP_DOSP = r':'
t_OP_COM = r','
t_PAR_IZQ = r'\('
t_PAR_DER = r'\)'
t_LLAVE_IZQ = r'\['
t_LLAVE_DER = r'\]'
t_AND = r'&&'
t_OR = r'\|\|'
t_NOT = r'!'


def t_NUM(t):
    r'[0-9]+'
    t.value = int(t.value)
    return t


def t_ID(t):
    r'[a-zA-Z_][a-zA-Z_0-9]*'
    t.type = reservadas.get(t.value.lower(), 'ID')
    return t


def t_TEXT(t):
    r'\".*\"'
    t.value = t.value[1:-1]
    return t


def t_IF(t):
    r'if'
    return t


def t_ELSE(t):
    r'else'
    return t


def t_RETURN(t):
    r'return'
    return t


def t_FUNC(t):
    r'func'
    return t


def t_PRINT(t):
    r'print'
    return t


def t_READ(t):
    r'read'
    return t


def t_B_FOR(t):
    r'for'
    return t


def t_B_WHILE(t):
    r'while'
    return t


def t_B_DO(t):
    r'do'
    return t


def t_T_INT(t):
    r'int'
    return t


def t_T_FLOAT(t):
    r'float'
    return t


def t_T_CHAR(t):
    r'char'
    return t


def t_T_STRING(t):
    r'string'
    return t


def t_T_BOOL(t):
    r'bool'
    return t


def t_newline(t):
    r'\n+'
    t.lexer.lineno += len(t.value)


t_ignore = ' \t'


def t_error(t):
    global resultado_lexema
    print("Carácter ilegal '%s'" % t.value[0])
    t.lexer.skip(1)


lexer = lex.lex()


def prueba(data):
    global resultado_lexema

    analizador = lex.lex()
    analizador.input(data)

    resultado_lexema.clear()
    while True:
        tok = analizador.token()
        if not tok:
            break

        token_info = {
            'Tipo': tok.type,
            'Lexema': tok.value,
            'Línea': tok.lineno,
            'Columna': encontrar_columna(data, tok.lexpos)
        }

        resultado_lexema.append(token_info)
    return resultado_lexema


def encontrar_columna(input_text, lexpos):
    return lexpos - input_text.rfind('\n', 0, lexpos)


if __name__ == '__main__':
    with open("ejemplo1.txt", "r") as archivo:
        data = archivo.read()

    prueba(data)
    for item in resultado_lexema:
        print(item)
